{"version":3,"file":"static/js/887.bfb0bfac.chunk.js","mappings":"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","sources":["components/ActorCard/ActorCard.styled.js","components/ActorCard/ActorCard.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","utils/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.li`\n  display: flex;\n  flex-direction: column;\n  padding-bottom: auto;\n  text-align: center;\n`;\n\nexport const PhotoLayout = styled.img`\n  width: 100%;\n  height: 240px;\n  object-fit: cover;\n`;\n\nexport const CardInfo = styled.div`\n  padding-top: 14px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Name = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n  margin-bottom: 10px;\n`;\n\nexport const Character = styled.p`\n  font-size: 12px;\n`;\n","import {\n  Card,\n  PhotoLayout,\n  CardInfo,\n  Character,\n  Name,\n} from './ActorCard.styled';\n\nexport const ActorCard = ({\n  photo = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ09uJRvSYTZguOy_L--3XALEwxqNIuvBvF8yJOHWNiew&s',\n  name,\n  character,\n}) => {\n  return (\n    <Card>\n      <PhotoLayout src={photo} alt={name} />\n\n      <CardInfo>\n        <Name>{name}</Name>\n        <Character>Character: {character}</Character>\n      </CardInfo>\n    </Card>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ActorList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 24px;\n  grid-row-gap: 32px;\n`;\n","import { ActorCard } from 'components/ActorCard/ActorCard';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchActors } from 'utils/movies-api';\nimport { ActorList } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Cast() {\n  const [actorData, setActorData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getActorData() {\n      setIsLoading(true);\n\n      try {\n        const fetchedData = await fetchActors(movieId);\n        setActorData(fetchedData);\n      } catch (error) {\n        alert(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getActorData();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {actorData.length > 0 ? (\n        <ActorList>\n          {actorData.map(actor => {\n            const { id, profile_path, name, character } = actor;\n            return (\n              <ActorCard\n                key={id}\n                photo={\n                  profile_path\n                    ? `http://image.tmdb.org/t/p/w185/${profile_path}`\n                    : 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ09uJRvSYTZguOy_L--3XALEwxqNIuvBvF8yJOHWNiew&s'\n                }\n                name={name}\n                character={character}\n              />\n            );\n          })}\n        </ActorList>\n      ) : (\n        <b>There is no info about actors</b>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '7091a56798b3dae7162597c32527055c';\naxios.defaults.baseURL = 'https://api.themoviedb.org';\n\nexport const fetchTrendingMovies = async () => {\n  return await axios\n    .get(`/3/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => response.data.results);\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n  return await axios\n    .get(`/3/movie/${movieId}?api_key=${API_KEY}`)\n    .then(r => r.data);\n};\n\nexport const fetchActors = async movieId => {\n  return await axios\n    .get(`/3/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(r => r.data.cast);\n};\n\nexport const fetchReviews = async movieId => {\n  return await axios\n    .get(`/3/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(r => r.data.results);\n};\n\nexport const fetchMoviesByQuery = async query => {\n  return await axios\n    .get(`/3/search/movie?query=${query}&api_key=${API_KEY}`)\n    .then(r => r.data.results);\n};\n"],"names":["Card","styled","_templateObject","_taggedTemplateLiteral","PhotoLayout","_templateObject2","CardInfo","_templateObject3","Name","_templateObject4","Character","_templateObject5","ActorCard","_ref","_ref$photo","photo","name","character","_jsxs","children","_jsx","src","alt","ActorList","Cast","_useState","useState","_useState2","_slicedToArray","actorData","setActorData","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","useEffect","_getActorData","_asyncToGenerator","_regeneratorRuntime","_callee","fetchedData","_context","prev","next","fetchActors","sent","t0","alert","message","finish","stop","apply","arguments","getActorData","_Fragment","Loader","length","map","actor","id","profile_path","concat","API_KEY","axios","fetchTrendingMovies","then","response","data","results","abrupt","fetchMovieDetailsById","_ref2","_callee2","_context2","r","_x","_ref3","_callee3","_context3","cast","_x2","fetchReviews","_ref4","_callee4","_context4","_x3","fetchMoviesByQuery","_ref5","_callee5","query","_context5","_x4"],"sourceRoot":""}